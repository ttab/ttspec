/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The identifier for this object
 */
export type UniformResourceIdentifier = string;
/**
 * The generic news type of this news object. $$TT: TT  added event for items with data describing a coming event.
 */
export type Type =
  | "text"
  | "audio"
  | "video"
  | "picture"
  | "graphic"
  | "composite"
  | "planning"
  | "component"
  | "event";
/**
 * A MIME type which applies to this object
 */
export type MIMEType = string;
/**
 * Indicates how complete this representation of a news item is. $$TT: associated is a TT-extension used when the news item appears as an association considered as a link without renditions.
 */
export type RepresentationType = "complete" | "incomplete" | "associated";
/**
 * An identifier for the structure of the news object. This can be any string but we suggest something identifying the structure of the content such as 'text-only' or 'text-photo'. Profiles are typically provider-specific. nar:profile $$TT: Possible values are PUBL, DATA, INFO or RAW. PUBL is a news item that can be published. DATA is data such as tables and figures (that are not meant to be edited). INFO is for information purposes only (not to be published). RAW is raw data, such as unedited videos, that is meant to be further edited before publishing.
 */
export type Profile = "PUBL" | "DATA" | "INFO" | "RAW";
/**
 * The version of the object which is identified by the uri property
 */
export type Version = string;
/**
 * Indicates when the first version of the item was created. (Added in version 1.2 from issue #5). nar:firstCreated
 */
export type FirstCreated = string;
/**
 * The date and time when this version of the object was created
 */
export type VersionCreated = string;
/**
 * The date and time when the content of this ninjs object was originally created. For example an old photo that is now handled as a ninjs object. nar:contentCreated (Added in 1.4)
 */
export type ContentCreated = string;
/**
 * $$TT: The date and time when this version of the object was persisted. For a photo, versioncreated is when photo was taken, versionstored is when we indexed it to the database.
 */
export type VersionStored = string;
/**
 * The date and time before which all versions of the object are embargoed. If absent, this object is not embargoed.
 */
export type Embargoed = string;
/**
 * $$TT: Textual description of why article is embargoed.
 */
export type ReasonForEmbargo = string;
/**
 * $$TT Used for items that concern a specific date such as events and planning items. Notice that this holds date only, no time. See also datetime.
 */
export type Date = string;
/**
 * $$TT For items that concern a specific date and time. See also date.
 */
export type DateAndTime = string;
/**
 * $$TT Used for items that concern a specific date such as events and planning items and has a specific enddate. Notice that this holds date only, no time. See also enddatetime.
 */
export type EndDate = string;
/**
 * $$TT For items that concern a specific enddate and time. See also enddate.
 */
export type EndDateAndTime = string;
/**
 * $$TT: Identifier of a grouping job this item belongs to. Typically the id of the job the article belong to, normally something like 327890.
 */
export type Job = string;
/**
 * The publishing status of the news object, its value is *usable* by default. Please note that for information about events that have been canceled the pubstatus of the ttninjs object will still be usable. The cancel information can be found in body_event. $$TT: replaced and comissioned added by TT.
 */
export type PublicationStatus = "usable" | "withheld" | "canceled" | "replaced" | "commissioned";
/**
 * The editorial urgency of the content from 1 to 9. 1 represents the highest urgency, 9 the lowest. $$TT: 1 is most urgent. 4 is normal. Definition here http://tt.se/spec/prio/1.0
 */
export type Urgency = number;
/**
 * The person or organisation claiming the intellectual property for the content.
 */
export type CopyrightHolder = string;
/**
 * Any necessary copyright notice for claiming the intellectual property for the content.
 */
export type CopyrightNotice = string;
/**
 * A natural-language statement about the usage terms pertaining to the content. $$TT: Specifically contains image usage restrictions from TT's suppliers.
 */
export type UsageTerms = string;
/**
 * A note that is intended to be read by internal staff at the receiving organisation, but not published to the end-user. (Added in version 1.2 from issue #6.) . ednote: nar:edNote  $$TT: TT will start using ednote and deprecate description_usage
 */
export type EditorialNote = string;
/**
 * The human language used by the content. The value should follow IETF BCP47
 */
export type Language = string;
/**
 * $$TT: The number of the week the item is planned to be published. Mainly used for feature-articles and ready pages. Also showing the week-number of planning and events.
 */
export type Week = number;
/**
 * $TT: TT managed editorial sort order. Priority numbers range from 1 (most important) to 3 (least). A 0 indicates that the item needs manual attention before publishning. Definitions and sort logic are defined here http://tt.se/spec/webprio/1.0
 */
export type WebPriority = number;
/**
 * $$TT: String identifier for originating source of content.
 */
export type Source = string;
/**
 * $$TT: String identifier for who receives commission for this object.
 */
export type Commisioncode = string;
/**
 * $$TT: Textual description of the item as text.
 */
export type DescriptionOfText = string;
/**
 * $$TT: TT editorial information. Can be anything from planned re-relases of object to restrictions. (DEPRECATED, use ednote instead!)
 */
export type DescriptionOfUsage = string;
/**
 * $$TT: The textual content of the news object as untagged text. Only present if type is PUBL or DATA.
 */
export type BodyText = string;
/**
 * $$TT: The textual content of the news object as HTML5. Only present if type is PUBL or DATA.
 */
export type BodyHTML5 = string;
/**
 * $$TT: The textual content of the news object as HTML5. Only present if type is PUBL or DATA. See alternative html5 schemas for details. richhtml5 allow more than the older html5 container
 */
export type BodyRichHTML5 = string;
/**
 * $$TT: Name of the arena where the event will take place.
 */
export type Arena = string;
/**
 * $$TT: Name of the city where the event will take place.
 */
export type City = string;
/**
 * $$TT: Address to the place where the event will take place.
 */
export type Address = string;
/**
 * $$TT: Three letter code for the country where the event will take place.
 */
export type Country = string;
/**
 * $$TT: URL to a web site with information about the event.
 */
export type EventURL = string;
/**
 * $$TT: Phone number to call for more information about the event.
 */
export type EventPhone = string;
/**
 * $$TT: Details on following the event online
 */
export type EventWeb = string;
/**
 * $$TT: Name of the organizer of the event
 */
export type Organizer = string;
/**
 * $$TT: Adress of the organizer of the event
 */
export type Organizeraddress = string;
/**
 * $$TT: City name of the organizer of the event
 */
export type Organizercity = string;
/**
 * $$TT: Country of the organizer of the event
 */
export type Organizer1 = string;
/**
 * $$TT: URL to a web page for the organizer
 */
export type OrganizerURL = string;
/**
 * $$TT: Phone number to the organizer of the event.
 */
export type OrganizerPhone = string;
/**
 * $$TT: Mail address to the organizer of the event.
 */
export type OrganizerMail = string;
/**
 * $$TT: Status code for the event. Value is normally 1. Canceled events will have 4.
 */
export type EventStatusCode = string;
/**
 * $$TT: Status for the event as a phrase. Normally 'Planerat'. Canceled events will have 'Inst√§llt'.
 */
export type EventStatusText = string;
/**
 * $$TT: For events in Sweden, the code of the region.
 */
export type RegionCode = string;
/**
 * $$TT: For events in Sweden, the name of the region.
 */
export type RegionText = string;
/**
 * $$TT: For events in Sweden, the code of the municipality.
 */
export type MunicipalityCode = string;
/**
 * $$TT: For events in Sweden the name of the municipality.
 */
export type MunicipalityText = string;
/**
 * $$TT: Tags of the event.
 */
export type EventTags = string;
/**
 * $$TT: Code for type of event.
 */
export type EventTypeCode = string;
/**
 * $$TT: Type of event as text.
 */
export type EventTypeText = string;
/**
 * $$TT: Extra information about the event.
 */
export type NoteExtra = string;
/**
 * $$TT: Text intended to be used by TT on planning lists of upcoming events.
 */
export type NotePM = string;
/**
 * $$TT: Information about how to get accreditation to the event.
 */
export type Accreditation = string;
/**
 * $$TT: If there are more information concerning the event.
 */
export type ExtraURL = string;
/**
 * $$TT: When the item was created in the TT event database.
 */
export type CreatedDatetime = string;
/**
 * $$TT: Initials of the person creating the item in the TT event database.
 */
export type CreatedBy = string;
/**
 * $$TT: When the item was last updated in the TT event database.
 */
export type ChangedDateTime = string;
/**
 * $$TT: Initials of the person doing the last update to the item.
 */
export type ChangedBy = string;
/**
 * $$TT: If the event is a trial this property hold the casenumber.
 */
export type CaseNumberInCourt = string;
/**
 * $$TT: When the news object is some form of sportsresults, table etc the data is delivered as sportsml. Only present if type is PUBL or DATA.
 */
export type BodySportsML = string;
/**
 * $$TT: Inner margin for this page. In the unit named in unit.
 */
export type InnerMargin = number;
/**
 * $$TT: Bottom margin for this page. In the unit named in unit.
 */
export type BottomMargin = number;
/**
 * $$TT: The pagenumber, but not nescessary a number. Can be a letter too.
 */
export type Pagina = string;
/**
 * $$TT: Outer margin for this page. In the unit named in unit.
 */
export type OuterMargin = number;
/**
 * $$TT: Unit in which the margins are given. Normally MM f√∂r millimeter.
 */
export type Unit = string;
/**
 * $$TT: Top margin for this page. In the unit named in unit.
 */
export type TopMargin = number;
/**
 * $$TT: Left margin for this page. In the unit named in unit.
 */
export type LeftMargin = number;
/**
 * $$TT: Right margin for this page. In the unit named in unit.
 */
export type RightMargin = number;
/**
 * $$TT: When pubstatus is 'commissioned', this field tells who commissioned it.
 */
export type CommissionedBy = string[];
/**
 * The name of a person
 */
export type Name = string;
/**
 * The relationship of the content of the news object to the person
 */
export type Relationship = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the person
 */
export type Scheme = string;
/**
 * The code for the person in a scheme (= controlled vocabulary) which is identified by the scheme property. $$TT: http://tt.se/spec/person/1.0/
 */
export type Code = string;
/**
 * An individual human being
 */
export type Person = {
  name?: Name;
  rel?: Relationship;
  scheme?: Scheme;
  code?: Code;
}[];
/**
 * The name of the organisation
 */
export type Name1 = string;
/**
 * The relationship of the content of the news object to the organisation
 */
export type Relationship1 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the organisation
 */
export type Scheme1 = string;
/**
 * The code for the organisation in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code1 = string;
/**
 * Ticker symbol used for the financial instrument
 */
export type Ticker = string;
/**
 * Identifier for the marketplace which uses the ticker symbols of the ticker property
 */
export type Exchange = string;
/**
 * Symbols used for a financial instrument linked to the organisation at a specific market place
 */
export type Symbols = {
  ticker?: Ticker;
  exchange?: Exchange;
}[];
/**
 * An administrative and functional structure which may act as as a business, as a political party or not-for-profit party. nar:subject
 */
export type Organisation = {
  name?: Name1;
  rel?: Relationship1;
  scheme?: Scheme1;
  code?: Code1;
  symbols?: Symbols;
}[];
/**
 * The name of the place
 */
export type Name2 = string;
/**
 * The relationship of the content of the news object to the place. $$TT: We use the values land, l√§n, landskap, kommun, ort, delstat, capital and city to indicate the type of area pointed to by the coordinates. Other types can be added.
 */
export type Relationship2 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the place. $$TT: http://tt.se/spec/place/1.0/
 */
export type Scheme2 = string;
/**
 * The code for the place in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code2 = string;
/**
 * What type of coordinates is given. Normally Point.
 */
export type Type1 = "Point";
/**
 * Array of coordinate pairs, but in our case on pair.
 */
export type Coordinates = number[];
/**
 * A named location
 */
export type Place = {
  name?: Name2;
  rel?: Relationship2;
  scheme?: Scheme2;
  code?: Code2;
  geometry_geojson?: GeometryGeoJSON;
}[];
/**
 * The name of the subject
 */
export type Name3 = string;
/**
 * The relationship of the content of the news object to the subject
 */
export type Relationship3 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the subject. $$TT: http://tt.se/spec/subref/1.0/ http://tt.se/spec/keyword/1.0/  http://tt.se/spec/eventtype/1.0/
 */
export type Scheme3 = string;
/**
 * The code for the subject in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code3 = string;
/**
 * A concept with a relationship to the content. $$TT: Used for content classification in swedish equivalent of IPTC Subject Reference see http://tt.se/spec/subref/1.0/ etc
 */
export type Subject = {
  name?: Name3;
  rel?: Relationship3;
  scheme?: Scheme3;
  code?: Code3;
}[];
/**
 * The name of the event
 */
export type Name4 = string;
/**
 * The relationship of the content of the news object to the event
 */
export type Relationship4 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the event
 */
export type Scheme4 = string;
/**
 * The code for the event in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code4 = string;
/**
 * Something which happens in a planned or unplanned manner. nar:?
 */
export type Event = {
  name?: Name4;
  rel?: Relationship4;
  scheme?: Scheme4;
  code?: Code4;
}[];
/**
 * The name of the object
 */
export type Name5 = string;
/**
 * The relationship of the content of the news object to the object
 */
export type Relationship5 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the object
 */
export type Scheme5 = string;
/**
 * The code for the object in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code5 = string;
/**
 * Something material, excluding persons. nar:subject
 */
export type Object = {
  name?: Name5;
  rel?: Relationship5;
  scheme?: Scheme5;
  code?: Code5;
}[];
/**
 * The name of the infosource
 */
export type Name6 = string;
/**
 * The relationship of the content of the news object to the infosource
 */
export type Relationship6 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the infosource
 */
export type Schema = string;
/**
 * The code for the infosource in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code6 = string;
/**
 * A party (person or organisation) which originated, modified, enhanced, distributed, aggregated or supplied the content or provided some information used to create or enhance the content. (Added in version 1.2 according to issue #15.) .    infosource:  nar:infoSource
 */
export type InfoSource = {
  name?: Name6;
  rel?: Relationship6;
  scheme?: Schema;
  code?: Code6;
}[];
/**
 * A short natural-language name for the item. (Added in version 1.2 according to issue #9). nar:itemMeta/title
 */
export type Title = string;
/**
 * The name(s) of the creator(s) of the content
 */
export type Byline = string;
/**
 * When the complete byline is sent as one string. Same as byline on root level. Example: Albert Jonsson/SvD/TT
 */
export type Byline1 = string;
/**
 * When byline is divided, holds the first name of the person. Example: Albert
 */
export type FirstName = string;
/**
 * When byline is divided, holds the last name of the person. Example: Jonsson
 */
export type LastName = string;
/**
 * Role of the person in the byline in relation to this ttninjs item, as string. Example: Photographer
 */
export type Role = string;
/**
 * Email address of the person in this byline. albert.jonsson@acme.com
 */
export type Email = string;
/**
 * Jobtitle can differ from role and is normally more connected to the person and not to the combination person-newsItem. Example: Editor in Chief
 */
export type JobTitle = string;
/**
 * Whether byline is for internal purposes. Example: true. If not present it means false.
 */
export type Internal = string;
/**
 * Phone number of the person in this byline. Example: +46555123456
 */
export type Phone = string;
/**
 * Initials of byline. Mainly used for records marked as internal. Example: mag
 */
export type Initials = string;
/**
 * Holder of one or more byline objects.
 */
export type Bylines = {
  byline?: Byline1;
  firstname?: FirstName;
  lastname?: LastName;
  role?: Role;
  email?: Email;
  jobtitle?: JobTitle;
  internal?: Internal;
  phone?: Phone;
  initials?: Initials;
  /**
   * The affiliation of the person. Example: SvD/TT
   */
  affiliation?: string;
  [k: string]: any;
}[];
/**
 * A brief and snappy introduction to the content, designed to catch the reader's attention
 */
export type Headline = string;
/**
 * $$TT: Short name given to article while in production. (DEPRECTED, use slugline instead.)
 */
export type Slug = string;
/**
 * A human-readable identifier for the item. (Added in version 1.2 from issue #4.). nar:slugline  $$TT: TT will use slugline and deprecate slug.
 */
export type Slugline = string;
/**
 * The name of the location from which the content originates.
 */
export type Located = string;
/**
 * The total character count in the article excluding figure captions. (Added in version 1.2 according to issue #27.). nar:charcount $$TT: The total character count in the article excluding figure captions.
 */
export type CharacterCount = number;
/**
 * The total number of words in the article excluding figure captions. (Added in version 1.2 according to issue #27.). nar:wordcount
 */
export type WordCount = number;
/**
 * The URL for accessing the rendition as a resource
 */
export type HREF = string;
/**
 * A MIME type which applies to the rendition
 */
export type MIMEType1 = string;
/**
 * A title for the link to the rendition resource
 */
export type Title1 = string;
/**
 * For still and moving images: the height of the display area measured in $$TT: unit and defaults to pixels
 */
export type Height = number;
/**
 * For still and moving images: the width of the display area measured in $$TT: unit and defaults to pixels
 */
export type Width = number;
/**
 * The size of the rendition resource in bytes
 */
export type SizeInBytes = number;
/**
 * $$TT: One of 'Thumbnail', 'Preview', 'Hires' or 'Hidef'
 */
export type Usage = string;
/**
 * $$TT: One of 'Normal', 'Watermark', 'BlackAndWhite', 'Cropped' or 'Framegrab'
 */
export type Variant = string;
/**
 * $$TT: The unit for width/height. Either px or mm
 */
export type Unit1 = string;
/**
 * $$TT: Video bitrate (if video)
 */
export type Bitrate = string;
/**
 * The total time duration of the content in seconds. (Added in version 1.2. Issue #18). nar:remoteContent@duration  $$TT: Video clip curation in seconds.
 */
export type Duration = number;
/**
 * Binary format name. (Added in version 1.2. Issue #18). nar:remoteContent@format
 */
export type Format = string;
/**
 * Calculated size of a 300 dpi upsampled image
 */
export type PrintSize = number;
/**
 * $$TT: Identifier in the originating system/source. TT will move originaltransmissionreference here.
 */
export type OriginalTransmissionReference = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the trust indicator
 */
export type Scheme6 = string;
/**
 * The code for the trust indicator in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code7 = string;
/**
 * The title of the resource being referenced.
 */
export type Title2 = string;
/**
 * The URL for accessing the trust indicator resource.
 */
export type Href = string;
/**
 * An array of objects to allow links to documents about trust indicators. (nar:link) issue #44. (Added in version 1.3)
 */
export type TrustIndicator = {
  scheme?: Scheme6;
  code?: Code7;
  title?: Title2;
  href?: Href;
}[];
/**
 * For example ninjs. nar:standard
 */
export type NameOfStandard = string;
/**
 * For example 1.3. nar:standardversion
 */
export type VersionOfStandard = string;
/**
 * The uri of the json schema to use for validation.
 */
export type Schema1 = string;
/**
 * The name of the genre
 */
export type Name7 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the genre. Normally  http://cv.iptc.org/newscodes/genre/
 */
export type Scheme7 = string;
/**
 * The code for the genre in a scheme (= controlled vocabulary) which is identified by the scheme property
 */
export type Code8 = string;
/**
 * A nature, intellectual or journalistic form of the content. nar:genre. (Added in version 1.3)  $$TT: TT will move sector to genre and deprecate sector.
 */
export type Genre = {
  name?: Name7;
  scheme?: Scheme7;
  code?: Code8;
}[];
/**
 * The date and time after which the Item is no longer considered editorially relevant by its provider. nar:expires (Added in 1.4)
 */
export type Expires = string;
/**
 * Expression of rights to be applied to content. nar:rightsInfo (Added in 1.4)
 */
export type RightsInformation = {
  [k: string]: any;
};
/**
 * $$TT: What type of page product. An abbreviation like IURDAG.
 */
export type PageProduct = string;
/**
 * $$TT: Number of pages in this delivery.
 */
export type MultipageCount = number;
/**
 * $$TT: Array of pagenumbers for the pages in this delivery. (A pagenumber can also be a letter.)
 */
export type Paginae = string[];
/**
 * $$TT: Code for this page product
 */
export type PageCode = string;
/**
 * $$TT: Variant of this page product
 */
export type PageVariant = string;
/**
 * The name of the product code. "Feature Fritid", "Nyheter N√∂je", etc
 */
export type Name8 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the product. http://tt.se/spec/product/1.0/
 */
export type Scheme8 = string;
/**
 * The code for the subject in a scheme (= controlled vocabulary) which is identified by the scheme property. "FTFRI", "TTNJE"
 */
export type Code9 = string;
/**
 * $$TT: TT Product classification codes. See http://tt.se/spec/product/1.0/
 */
export type Product = {
  name?: Name8;
  scheme?: Scheme8;
  code?: Code9;
}[];
/**
 * $$TT: Array of identifiers of news objects this object is replacing.
 */
export type Replacing = string[];
/**
 * $$TT: The identifier of the news object this one is replaced by.
 */
export type ReplacedBy = string;
/**
 * $$TT: The identifier of the previous revision.
 */
export type URI = string;
/**
 * $$TT: Short name given to article while in production.
 */
export type Slug1 = string;
/**
 * $$TT: Array of identifiers this revision is replacing.
 */
export type Replacing1 = string[];
/**
 * Date and time when this version was published = created. (Added in 1.4)
 */
export type VersionDateAndTime = string;
/**
 * $$TT: Array of previous versions of this news object. See http://spec.tt.se/revisions.html
 */
export type Revisions = {
  uri: URI;
  slug?: Slug1;
  replacing?: Replacing1;
  versioncreated?: VersionDateAndTime;
  [k: string]: any;
}[];
/**
 * $$TT: Designator for the major ways of grouping content (inrikes, utrikes, etc) and PRM for press releases. Not mandatory, often omitted. DEPRECATED and moved to genre.
 */
export type Sector = "INR" | "UTR" | "EKO" | "KLT" | "SPT" | "FEA" | "NOJ" | "PRM";
/**
 * The name of the storytag
 */
export type Name9 = string;
/**
 * The relationship of the content to the fixture
 */
export type Relationship7 = string;
/**
 * The identifier of a scheme (= controlled vocabulary) which includes a code for the subject. $$TT: http://tt.se/spec/story/1.0/
 */
export type Scheme9 = string;
/**
 * The code for the story in a scheme (= controlled vocabulary) which is identified by the scheme property.
 */
export type Code10 = string;
/**
 * $$TT: A storytag that this item belong to. A sort of grouping name that can be used over time for a running story. Broader than a slugline, narrower than a media topic.
 */
export type Fixture = {
  name?: Name9;
  rel?: Relationship7;
  scheme?: Scheme9;
  code?: Code10;
}[];
/**
 * Role of this advice.
 */
export type Role1 = "publish";
/**
 * Editorial advice to the receiver of the news object. Only in dev so far. Tests with the C-POP project.
 */
export type Advices = {
  role?: Role1;
  environment?: {
    code?: string;
    scheme?: string;
    [k: string]: any;
  }[];
  /**
   * Advice regarding the importance of the content from an emotional perspective. Experimental vocabulary, part of the C-POP project.
   */
  importance?: {
    /**
     * Present values are: essential, useful and entertaining.
     */
    code?: string;
    /**
     * http://cv.iptc.org/newscodes/advice-importance
     */
    scheme?: string;
  };
  /**
   * Advice regarding the length of time that the content is considered to be relevant. Experimental vocabulary, part of the C-POP project.
   */
  lifetime?: {
    /**
     * Present values are: short, medium, long and evergreen.
     */
    code?: string;
    /**
     * http://cv.iptc.org/newscodes/advice-lifetime
     */
    scheme?: string;
  };
}[];

/**
 * A TT news item as JSON object -- Derived from https://www.iptc.org/std/ninjs/ninjs-schema_1.4.json -- (c) Copyright 2022 TT - TT Nyhetsbyr√•n - tt.se - This document is published under the Creative Commons Attribution 3.0 license, see  http://creativecommons.org/licenses/by/3.0/.
 */
export interface TTVariantOfIPTCNinjsNewsInJSONVersion14 {
  uri: UniformResourceIdentifier;
  type?: Type;
  mimetype?: MIMEType;
  representationtype?: RepresentationType;
  profile?: Profile;
  version?: Version;
  firstcreated?: FirstCreated;
  versioncreated?: VersionCreated;
  contentcreated?: ContentCreated;
  versionstored?: VersionStored;
  embargoed?: Embargoed;
  embargoedreason?: ReasonForEmbargo;
  date?: Date;
  datetime?: DateAndTime;
  enddate?: EndDate;
  enddatetime?: EndDateAndTime;
  job?: Job;
  pubstatus?: PublicationStatus;
  urgency?: Urgency;
  copyrightholder?: CopyrightHolder;
  copyrightnotice?: CopyrightNotice;
  usageterms?: UsageTerms;
  ednote?: EditorialNote;
  language?: Language;
  week?: Week;
  webprio?: WebPriority;
  source?: Source;
  commissioncode?: Commisioncode;
  description_text?: DescriptionOfText;
  description_usage?: DescriptionOfUsage;
  body_text?: BodyText;
  body_html5?: BodyHTML5;
  body_richhtml5?: BodyRichHTML5;
  body_event?: BodyEventData;
  body_sportsml?: BodySportsML;
  body_pages?: BodyOfPagesInfo;
  commissionedby?: CommissionedBy;
  person?: Person;
  organisation?: Organisation;
  place?: Place;
  subject?: Subject;
  event?: Event;
  object?: Object;
  infosource?: InfoSource;
  title?: Title;
  byline?: Byline;
  bylines?: Bylines;
  headline?: Headline;
  slug?: Slug;
  slugline?: Slugline;
  located?: Located;
  charcount?: CharacterCount;
  wordcount?: WordCount;
  renditions?: Renditions;
  associations?: Associations;
  altids?: AlternativeId;
  /**
   * $$TT: Identifier in the originating system/source. DEPRECATED: Will be handled as an altid
   */
  originaltransmissionreference?: string;
  trustindicator?: TrustIndicator;
  $standard?: Standard;
  genre?: Genre;
  expires?: Expires;
  rightsinfo?: RightsInformation;
  signals?: Signals;
  product?: Product;
  replacing?: Replacing;
  replacedby?: ReplacedBy;
  assignments?: Assignments;
  revisions?: Revisions;
  sector?: Sector;
  fixture?: Fixture;
  advice?: Advices;
}
/**
 * $$TT: Object with properties containing data on upcoming events.
 */
export interface BodyEventData {
  arena?: Arena;
  city?: City;
  address?: Address;
  country?: Country;
  eventurl?: EventURL;
  eventphone?: EventPhone;
  eventweb?: EventWeb;
  organizer?: Organizer;
  organizeraddress?: Organizeraddress;
  organizercity?: Organizercity;
  organizercountry?: Organizer1;
  organizerurl?: OrganizerURL;
  organizerphone?: OrganizerPhone;
  organizermail?: OrganizerMail;
  eventstatus?: EventStatusCode;
  eventstatus_text?: EventStatusText;
  region?: RegionCode;
  region_text?: RegionText;
  municipality?: MunicipalityCode;
  municipality_text?: MunicipalityText;
  eventtags?: EventTags;
  eventtype?: EventTypeCode;
  eventtype_text?: EventTypeText;
  note_extra?: NoteExtra;
  note_pm?: NotePM;
  accreditation?: Accreditation;
  extraurl?: ExtraURL;
  createddate?: CreatedDatetime;
  createdby?: CreatedBy;
  changeddate?: ChangedDateTime;
  changedby?: ChangedBy;
  courtcasenumber?: CaseNumberInCourt;
}
/**
 * $$TT: One or more objects describing the pages in this delivery.
 */
export interface BodyOfPagesInfo {
  [k: string]: DescriptiveName;
}
/**
 * $$TT: Description of one of the pages in this delivery.
 *
 * This interface was referenced by `BodyOfPagesInfo`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+".
 */
export interface DescriptiveName {
  innermargin?: InnerMargin;
  bottommargin?: BottomMargin;
  pagina?: Pagina;
  outermargin?: OuterMargin;
  unit?: Unit;
  topmargin?: TopMargin;
  leftmargin?: LeftMargin;
  rightmargin?: RightMargin;
}
/**
 * $$TT: An optional GeoJSON description of the place.
 */
export interface GeometryGeoJSON {
  type?: Type1;
  coordinates?: Coordinates;
}
/**
 * Wrapper for different renditions of non-textual content of the news object
 */
export interface Renditions {
  [k: string]: RenditionIdentifier;
}
/**
 * A specific rendition of a non-textual content of the news object.
 *
 * This interface was referenced by `Renditions`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+".
 */
export interface RenditionIdentifier {
  href?: HREF;
  mimetype?: MIMEType1;
  title?: Title1;
  height?: Height;
  width?: Width;
  sizeinbytes?: SizeInBytes;
  usage?: Usage;
  variant?: Variant;
  unit?: Unit1;
  bitrate?: Bitrate;
  duration?: Duration;
  format?: Format;
  printsize?: PrintSize;
}
/**
 * Content of news objects which are associated with this news object.
 */
export interface Associations {
  [k: string]: TTVariantOfIPTCNinjsNewsInJSONVersion14;
}
/**
 * Alternative identifiers of the item. It is up to the individual provider to name and set type on the alternative identifiers they like to use. nar:altId issue #3. (Added in version 1.3)
 */
export interface AlternativeId {
  originaltransmissionreference?: OriginalTransmissionReference;
}
/**
 * An object with information about standard, version and schema this instance is valid against. nar:standard, nar:standardversion and xml:schema issue #43. (Added in version 1.3)
 */
export interface Standard {
  name?: NameOfStandard;
  version?: VersionOfStandard;
  schema?: Schema1;
}
/**
 * $$TT: signals is suggested by AP but not yet included in ninjs. When included it will probably hold a large number of properties.
 */
export interface Signals {
  pageproduct?: PageProduct;
  multipagecount?: MultipageCount;
  paginae?: Paginae;
  pagecode?: PageCode;
  pagevariant?: PageVariant;
}
/**
 * $$TT: Individual assignments to produce content connected with one planning item.
 */
export interface Assignments {
  [k: string]: TTVariantOfIPTCNinjsNewsInJSONVersion14;
}
